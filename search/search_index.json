{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Shimmer for Jetpack Compose &amp; Compose Multiplatform","text":"<p>A library which offers a shimmering effect for Compose.</p> <p></p>"},{"location":"#setup","title":"Setup","text":"<p>The library is available on <code>mavenCentral()</code>.</p> <pre><code>dependencies {\n  implementation(\"com.valentinilk.shimmer:compose-shimmer:1.3.3\")\n}\n</code></pre>"},{"location":"#multiplatform-targets","title":"Multiplatform Targets","text":"<p>Supported CMP targets are: <code>Android</code>, <code>iOS</code>, <code>JVM (Desktop)</code>, <code>JS (Browser)</code> and <code>Wasm (WebAssembly)</code>.</p>"},{"location":"#compose-multiplatform-version","title":"Compose Multiplatform Version","text":"<p>In case of compatibility issues, select a library version that is based on the same compose version as your project.</p> Shimmer Version Based on Compose 1.3.3 1.8.1 1.3.2 1.7.3"},{"location":"#quick-start","title":"Quick Start","text":"<p>Simply apply the <code>shimmer</code> modifier to any UI of your choice. The code below will emit the shimmering UI that can be seen in the gif above. <pre><code>@Composable\nfun ShimmeringPlaceholder() {\n    Row(\n        modifier = Modifier\n            .shimmer() // &lt;- Affects all subsequent UI elements\n            .fillMaxWidth()\n            .padding(16.dp),\n        horizontalArrangement = Arrangement.spacedBy(16.dp),\n    ) {\n        Box(\n            modifier = Modifier\n                .size(80.dp, 80.dp)\n                .background(Color.LightGray),\n        )\n        Column(\n            verticalArrangement = Arrangement.spacedBy(16.dp),\n        ) {\n            Box(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .height(24.dp)\n                    .background(Color.LightGray),\n            )\n            Box(\n                modifier = Modifier\n                    .size(120.dp, 20.dp)\n                    .background(Color.LightGray),\n            )\n        }\n    }\n}\n</code></pre></p>"},{"location":"#modifier-placement","title":"Modifier placement","text":"<p>As usual with modifiers the order matters. Every UI component defined after the <code>shimmer</code> modifier will be affected by the animation. This includes child views and other modifiers:</p> <p>The first example demonstrates that only the inner <code>Box</code> is shimmering, even though the <code>shimmer</code> has been added to the outer <code>Box</code>'s modifier stack. The blue <code>background</code> is not shimmering, as it's sitting above the <code>shimmer</code> modifier. <pre><code>Box(\n  modifier = Modifier\n    .size(128.dp)\n    .background(Color.Blue)\n    .shimmer(),\n  contentAlignment = Alignment.Center\n) {\n  Box(\n    modifier = Modifier\n      .size(64.dp)\n      .background(Color.Red)\n  )\n}\n</code></pre></p> <p></p> <p>If the modifier, however, is applied earlier, the outer <code>Box</code>'s <code>background</code> modifier is affected by the <code>shimmer</code> as well. <pre><code>Box(\n  modifier = Modifier\n    .size(128.dp)\n    .shimmer()\n    .background(Color.Blue),\n  contentAlignment = Alignment.Center\n) {\n  Box(\n    modifier = Modifier\n      .size(64.dp)\n      .background(Color.Red)\n  )\n}\n</code></pre></p> <p></p>"},{"location":"#theming","title":"Theming","text":"<p>The library includes a <code>ShimmerTheme</code> which can be provided as a local composition. A good practice would be to integrate the theming into your customized MaterialTheme. There is no need to wrap every single <code>shimmer</code> into a <code>CompositionLocalProvider</code>.</p> <pre><code>val yourShimmerTheme = defaultShimmerTheme.copy(...)\n\nCompositionLocalProvider(\n  LocalShimmerTheme provides yourShimmerTheme\n) {\n  [...]\n}\n</code></pre> <p>The theme can also be passed as a parameter by using the <code>rememberShimmer(...)</code> function, which is explained further down below.</p> <p>The theme itself offers a few simple configurations like the shimmer's <code>rotation</code> or <code>width</code>. Additionally a few unabstracted objects like an <code>AnimationSpec</code> or <code>BlendMode</code> are exposed. While this violates the principales of information hiding, it allows for some great customizations.</p> <p>For further information have a look at documentation in data class itself and have a look at the <code>ThemingSamples</code> in the sample app.</p> <p></p>"},{"location":"#advanced-usage","title":"Advanced Usage","text":"<p>The default <code>shimmer()</code> modifier creates a shimmering animation, which will traverse over the view in a certain time. That means that the animation will have a different velocity, depending on the size of the view.</p> <p>If you apply the modifier to multiple views, each of a different size, then each shimmer will have its own velocity. This effect can be seen in the following gif:</p> <p></p> <p>That might not always be the desired effect, that's why the library offers a way to set the boundaries for the animation:</p> <pre><code>val shimmerInstance = rememberShimmer(shimmerBounds = ShimmerBounds.XXX)\nBox(modifier = Modifier.shimmer(shimmerInstance))\n</code></pre>"},{"location":"#shimmerboundsview-default","title":"ShimmerBounds.View (default)","text":"<p>The view's height and width will be used as the boundaries for the animation. This option was used to create the gifs shown above and should be sufficient for most use cases.</p>"},{"location":"#shimmerboundswindow","title":"ShimmerBounds.Window","text":"<p>This option uses the window's height, with and coordinate system for the calculations. It will create a shimmer that travels over the whole window instead of only the views. But only views that have the shimmer modifier attached will be affected.</p> <p>Be aware that this option might look odd on scrollable content, because the shimmer will be positioned relative to the window. So the shimmer will not be moved together with the content.</p> <pre><code>Column {\n  val shimmerInstance = rememberShimmer(shimmerBounds = ShimmerBounds.Window)\n  Text(\"Shimmering Text\", modifier = Modifier.shimmer(shimmerInstance))\n  Text(\"Non-shimmering Text\")\n  Text(\"Shimmering Text\", modifier = Modifier.shimmer(shimmerInstance))\n}\n</code></pre> <p></p>"},{"location":"#shimmerboundscustom","title":"ShimmerBounds.Custom","text":"<p>The downsides of the <code>Window</code> option is why the <code>ShimmerBounds.Custom</code> option exists. By using this option, the shimmer and its content will not be drawn until the bounds are set manually by using the <code>updateBounds</code> method on the <code>Shimmer</code>. This can be used to attach the shimmer to a scrollable list for example. Or simply use the default <code>ShimmerBounds.View</code> option.</p> <pre><code>val shimmerInstance = rememberShimmer(ShimmerBounds.Custom)\nColumn(\n  modifier = Modifier\n    .fillMaxSize()\n    .verticalScroll(rememberScrollState())\n    .onGloballyPositioned { layoutCoordinates -&gt;\n      // Util function included in the library\n      val position = layoutCoordinates.unclippedBoundsInWindow()\n      shimmerInstance.updateBounds(position)\n    },\n) {\n  Text(\"Shimmering Text\", modifier = Modifier.shimmer(shimmerInstance))\n  Text(\"Non-shimmering Text\")\n  Text(\"Shimmering Text\", modifier = Modifier.shimmer(shimmerInstance))\n}\n</code></pre>"},{"location":"#sample-apps","title":"Sample Apps","text":"<p>Sample apps for different platforms are included in the project. To use them, clone the repository into a folder locally.</p>"},{"location":"#android","title":"Android","text":"<p>To run the Android app, simply open the project in Android Studio. Select the <code>sample</code> configuration and run it.</p>"},{"location":"#ios","title":"iOS","text":"<p>The iOS app can be build and launched by using XCode. Open the <code>iosApp</code> folder with XCode as a project. Adapt the signing in XCode to match your needs and launch the app on an emulator or iOS device.</p>"},{"location":"#desktop","title":"Desktop","text":"<p>The desktop app can be launched by using the <code>sample.desktop</code> configuration in Android Studio. Or run <code>./gradlew :sample:run</code> in the terminal.</p>"},{"location":"#browser","title":"Browser","text":"<p>To run the sample in the browser, simply use the <code>sample.browser</code> configuration in Android Studio. Or run <code>./gradlew :sample:jsBrowserDevelopmentRun</code> in the terminal.</p>"},{"location":"#webassembly-wasm","title":"WebAssembly (Wasm)","text":"<p>To run the wasm sample use the <code>sample.wasm</code> configuration in Android Studio or run <code>./gradlew :sample:wasmJsBrowserDevelopmentRun</code> in the terminal.</p>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2025 Valentin Ilk\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"api/","title":"Index","text":"<p>/</p>"},{"location":"api/#all-modules","title":"All modules:","text":"Name shimmer"},{"location":"api/shimmer/","title":"Index","text":"<p>//shimmer</p>"},{"location":"api/shimmer/#shimmer","title":"shimmer","text":""},{"location":"api/shimmer/#packages","title":"Packages","text":"Name com.valentinilk.shimmer"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/","title":"API","text":"<p>//shimmer/com.valentinilk.shimmer</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/#types","title":"Types","text":"Name Summary Shimmer [common]class Shimmer ShimmerBounds [common]interface ShimmerBounds ShimmerTheme [common]data class ShimmerTheme(val animationSpec: AnimationSpec&lt;Float&gt;, val blendMode: BlendMode, val rotation: Float, val shaderColors: List&lt;Color&gt;, val shaderColorStops: List&lt;Float&gt;?, val shimmerWidth: Dp)"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/#properties","title":"Properties","text":"Name Summary defaultShimmerTheme [common]val defaultShimmerTheme: ShimmerTheme LocalShimmerTheme [common]val LocalShimmerTheme: ProvidableCompositionLocal&lt;ShimmerTheme&gt;"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/#functions","title":"Functions","text":"Name Summary rememberShimmer [common]@Composablefun rememberShimmer(shimmerBounds: ShimmerBounds, theme: ShimmerTheme = LocalShimmerTheme.current): Shimmer shimmer [common]@Composablefun Modifier.shimmer(customShimmer: Shimmer = rememberShimmer(ShimmerBounds.View)): Modifier shimmerSpec [common]@Stablefun shimmerSpec(durationMillis: Int = DefaultDurationMillis, delayMillis: Int = 0, easing: Easing = LinearEasing): KeyframesSpec&lt;Float&gt;Creates a KeyframesSpec which animates from 0f to 1f during the time span defined in durationMillis. The additional delayMillis define how long the animation will stay at its final value of 1f before the animation ends. The spec will ignore any initial or target value defined in an Animatable. unclippedBoundsInWindow [common]fun LayoutCoordinates.unclippedBoundsInWindow(): RectThe regular boundsInWindow returns a rect that is clipped by the edges of the window. So if a view is scrolled half way out of the screen, the rect returned would only have half the size required for the shimmer calculations."},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-local-shimmer-theme/","title":"local shimmer theme","text":"<p>//shimmer/com.valentinilk.shimmer/LocalShimmerTheme</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-local-shimmer-theme/#localshimmertheme","title":"LocalShimmerTheme","text":"<p>[common]\\ val LocalShimmerTheme: ProvidableCompositionLocal&lt;ShimmerTheme&gt;</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/default-shimmer-theme/","title":"Default shimmer theme","text":"<p>//shimmer/com.valentinilk.shimmer/defaultShimmerTheme</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/default-shimmer-theme/#defaultshimmertheme","title":"defaultShimmerTheme","text":"<p>[common]\\ val defaultShimmerTheme: ShimmerTheme</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/remember-shimmer/","title":"Remember shimmer","text":"<p>//shimmer/com.valentinilk.shimmer/rememberShimmer</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/remember-shimmer/#remembershimmer","title":"rememberShimmer","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun rememberShimmer(shimmerBounds: ShimmerBounds, theme: ShimmerTheme = LocalShimmerTheme.current): Shimmer</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/shimmer-spec/","title":"Shimmer spec","text":"<p>//shimmer/com.valentinilk.shimmer/shimmerSpec</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/shimmer-spec/#shimmerspec","title":"shimmerSpec","text":"<p>[common]\\</p> <p>@Stable</p> <p>fun shimmerSpec(durationMillis: Int = DefaultDurationMillis, delayMillis: Int = 0, easing: Easing = LinearEasing): KeyframesSpec&lt;Float&gt;</p> <p>Creates a KeyframesSpec which animates from 0f to 1f during the time span defined in durationMillis. The additional delayMillis define how long the animation will stay at its final value of 1f before the animation ends. The spec will ignore any initial or target value defined in an Animatable.</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/shimmer-spec/#parameters","title":"Parameters","text":"<p>common</p> durationMillis duration of the animation spec. Excluding the delayMillis. delayMillis additional amount of time the animation will stay at 1f before ending. easing the easing curve that will be used to interpolate between 0f and 1f."},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/shimmer/","title":"Shimmer","text":"<p>//shimmer/com.valentinilk.shimmer/shimmer</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/shimmer/#shimmer","title":"shimmer","text":"<p>[common]\\</p> <p>@Composable</p> <p>fun Modifier.shimmer(customShimmer: Shimmer = rememberShimmer(ShimmerBounds.View)): Modifier</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/unclipped-bounds-in-window/","title":"Unclipped bounds in window","text":"<p>//shimmer/com.valentinilk.shimmer/unclippedBoundsInWindow</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/unclipped-bounds-in-window/#unclippedboundsinwindow","title":"unclippedBoundsInWindow","text":"<p>[common]\\ fun LayoutCoordinates.unclippedBoundsInWindow(): Rect</p> <p>The regular boundsInWindow returns a rect that is clipped by the edges of the window. So if a view is scrolled half way out of the screen, the rect returned would only have half the size required for the shimmer calculations.</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/unclipped-bounds-in-window/#return","title":"Return","text":"<p>Rect that is not clipped by the window's size.</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer/","title":"Index","text":"<p>//shimmer/com.valentinilk.shimmer/Shimmer</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer/#shimmer","title":"Shimmer","text":"<p>[common]\\ class Shimmer</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer/#functions","title":"Functions","text":"Name Summary equals [common]open operator override fun equals(other: Any?): Boolean hashCode [common]open override fun hashCode(): Int updateBounds [common]fun updateBounds(bounds: Rect?)"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer/equals/","title":"Equals","text":"<p>//shimmer/com.valentinilk.shimmer/Shimmer/equals</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer/equals/#equals","title":"equals","text":"<p>[common]\\ open operator override fun equals(other: Any?): Boolean</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer/hash-code/","title":"Hash code","text":"<p>//shimmer/com.valentinilk.shimmer/Shimmer/hashCode</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer/hash-code/#hashcode","title":"hashCode","text":"<p>[common]\\ open override fun hashCode(): Int</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer/update-bounds/","title":"Update bounds","text":"<p>//shimmer/com.valentinilk.shimmer/Shimmer/updateBounds</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer/update-bounds/#updatebounds","title":"updateBounds","text":"<p>[common]\\ fun updateBounds(bounds: Rect?)</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-bounds/","title":"Index","text":"<p>//shimmer/com.valentinilk.shimmer/ShimmerBounds</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-bounds/#shimmerbounds","title":"ShimmerBounds","text":"<p>interface ShimmerBounds</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-bounds/#inheritors","title":"Inheritors","text":"Custom View Window"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-bounds/#types","title":"Types","text":"Name Summary Custom [common]data object Custom : ShimmerBounds View [common]data object View : ShimmerBounds Window [common]data object Window : ShimmerBounds"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-bounds/-custom/","title":"Index","text":"<p>//shimmer/com.valentinilk.shimmer/ShimmerBounds/Custom</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-bounds/-custom/#custom","title":"Custom","text":"<p>[common]\\ data object Custom : ShimmerBounds</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-bounds/-view/","title":"Index","text":"<p>//shimmer/com.valentinilk.shimmer/ShimmerBounds/View</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-bounds/-view/#view","title":"View","text":"<p>[common]\\ data object View : ShimmerBounds</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-bounds/-window/","title":"Index","text":"<p>//shimmer/com.valentinilk.shimmer/ShimmerBounds/Window</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-bounds/-window/#window","title":"Window","text":"<p>[common]\\ data object Window : ShimmerBounds</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/","title":"Index","text":"<p>//shimmer/com.valentinilk.shimmer/ShimmerTheme</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/#shimmertheme","title":"ShimmerTheme","text":"<p>[common]\\ data class ShimmerTheme(val animationSpec: AnimationSpec&lt;Float&gt;, val blendMode: BlendMode, val rotation: Float, val shaderColors: List&lt;Color&gt;, val shaderColorStops: List&lt;Float&gt;?, val shimmerWidth: Dp)</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/#constructors","title":"Constructors","text":"ShimmerTheme [common]constructor(animationSpec: AnimationSpec&lt;Float&gt;, blendMode: BlendMode, rotation: Float, shaderColors: List&lt;Color&gt;, shaderColorStops: List&lt;Float&gt;?, shimmerWidth: Dp)"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/#properties","title":"Properties","text":"Name Summary animationSpec [common]val animationSpec: AnimationSpec&lt;Float&gt;The AnimationSpec which will be used for the traversal. Use an infinite spec to repeat shimmering. blendMode [common]val blendMode: BlendModeThe BlendMode used in the shimmer's androidx.compose.ui.graphics.Paint. Have a look at the theming samples to get an idea on how to utilize the blend mode. rotation [common]val rotation: FloatDescribes the orientation of the shimmer in degrees. Zero is thereby defined as shimmer traversing from the left to the right. The rotation is applied clockwise. Only values &gt;= 0 will be accepted. shaderColors [common]val shaderColors: List&lt;Color&gt;The shaderColors can be used to control the colors and alpha values of the shimmer. The size of the list has to be kept in sync with the shaderColorStops. Consult the docs of the androidx.compose.ui.graphics.LinearGradientShader for more information and have a look at the theming samples. shaderColorStops [common]val shaderColorStops: List&lt;Float&gt;?See docs of shaderColors. shimmerWidth [common]val shimmerWidth: DpControls the width used to distribute the shaderColors."},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/-shimmer-theme/","title":"shimmer theme","text":"<p>//shimmer/com.valentinilk.shimmer/ShimmerTheme/ShimmerTheme</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/-shimmer-theme/#shimmertheme","title":"ShimmerTheme","text":"<p>[common]\\ constructor(animationSpec: AnimationSpec&lt;Float&gt;, blendMode: BlendMode, rotation: Float, shaderColors: List&lt;Color&gt;, shaderColorStops: List&lt;Float&gt;?, shimmerWidth: Dp)</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/animation-spec/","title":"Animation spec","text":"<p>//shimmer/com.valentinilk.shimmer/ShimmerTheme/animationSpec</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/animation-spec/#animationspec","title":"animationSpec","text":"<p>[common]\\ val animationSpec: AnimationSpec&lt;Float&gt;</p> <p>The AnimationSpec which will be used for the traversal. Use an infinite spec to repeat shimmering.</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/animation-spec/#see-also","title":"See also","text":"defaultShimmerTheme"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/blend-mode/","title":"Blend mode","text":"<p>//shimmer/com.valentinilk.shimmer/ShimmerTheme/blendMode</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/blend-mode/#blendmode","title":"blendMode","text":"<p>[common]\\ val blendMode: BlendMode</p> <p>The BlendMode used in the shimmer's androidx.compose.ui.graphics.Paint. Have a look at the theming samples to get an idea on how to utilize the blend mode.</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/blend-mode/#see-also","title":"See also","text":"ThemingSamples in the sample app."},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/rotation/","title":"Rotation","text":"<p>//shimmer/com.valentinilk.shimmer/ShimmerTheme/rotation</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/rotation/#rotation","title":"rotation","text":"<p>[common]\\ val rotation: Float</p> <p>Describes the orientation of the shimmer in degrees. Zero is thereby defined as shimmer traversing from the left to the right. The rotation is applied clockwise. Only values &gt;= 0 will be accepted.</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/shader-color-stops/","title":"Shader color stops","text":"<p>//shimmer/com.valentinilk.shimmer/ShimmerTheme/shaderColorStops</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/shader-color-stops/#shadercolorstops","title":"shaderColorStops","text":"<p>[common]\\ val shaderColorStops: List&lt;Float&gt;?</p> <p>See docs of shaderColors.</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/shader-colors/","title":"Shader colors","text":"<p>//shimmer/com.valentinilk.shimmer/ShimmerTheme/shaderColors</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/shader-colors/#shadercolors","title":"shaderColors","text":"<p>[common]\\ val shaderColors: List&lt;Color&gt;</p> <p>The shaderColors can be used to control the colors and alpha values of the shimmer. The size of the list has to be kept in sync with the shaderColorStops. Consult the docs of the androidx.compose.ui.graphics.LinearGradientShader for more information and have a look at the theming samples.</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/shader-colors/#see-also","title":"See also","text":"ThemingSamples in the samples app."},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/shimmer-width/","title":"Shimmer width","text":"<p>//shimmer/com.valentinilk.shimmer/ShimmerTheme/shimmerWidth</p>"},{"location":"api/shimmer/shimmer/com.valentinilk.shimmer/-shimmer-theme/shimmer-width/#shimmerwidth","title":"shimmerWidth","text":"<p>[common]\\ val shimmerWidth: Dp</p> <p>Controls the width used to distribute the shaderColors.</p>"}]}